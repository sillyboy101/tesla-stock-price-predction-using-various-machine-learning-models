#%%
"""
Stock Price Prediction Using Machine Learning

This script uses historical stock data from Yahoo Finance (Tesla - TSLA)
and applies three machine learning models to predict the next day's closing price:
- Linear Regression
- Random Forest Regressor
- XGBoost Regressor

Features:
- Technical indicators: Moving Averages, Volatility, Volume Change
- Evaluation with Mean Squared Error (MSE)
- Visualization of actual vs predicted prices


"""

#%% ----------------------- Imports -----------------------
import yfinance as yf
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

#%% -------------------- Data Collection ------------------
# Fetch 1 year of historical data for Tesla (TSLA)
ticker = yf.Ticker("TSLA")
df = ticker.history(period="1y")

#%% ------------------ Feature Engineering ----------------
# Calculate returns
df["Return"] = df["Close"].pct_change()

# Technical indicators
df["MA_5"] = df["Close"].rolling(window=5).mean()
df["MA_20"] = df["Close"].rolling(window=20).mean()
df["Volatility_5"] = df["Return"].rolling(window=5).std()
df["Volume_Change"] = df["Volume"].pct_change()

# Shift target column to predict next day's closing price
df["Target"] = df["Close"].shift(-1)

# Drop any rows with NaNs generated by rolling functions or shift
df.dropna(inplace=True)

#%% ------------------ Feature Selection ------------------
features = [
    "Open", "High", "Low", "Close", "Volume",
    "MA_5", "MA_20", "Volatility_5", "Volume_Change"
]

X = df[features]
y = df["Target"]

#%% --------------------- Train-Test Split ----------------
# Use the most recent 20% of the data as test set (no shuffle to preserve time series order)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, shuffle=False, test_size=0.2
)

#%% ---------------------- Model Training -----------------
# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# XGBoost Regressor
xgb = XGBRegressor(n_estimators=100, learning_rate=0.1)
xgb.fit(X_train, y_train)

#%% ------------------- Model Evaluation ------------------
def evaluate(model, name):
    """Evaluates and prints the Mean Squared Error of a model"""
    preds = model.predict(X_test)
    mse = mean_squared_error(y_test, preds)
    print(f"{name} MSE: {mse:.4f}")

# Evaluate all models
evaluate(lr, "Linear Regression")
evaluate(rf, "Random Forest")
evaluate(xgb, "XGBoost")

#%% --------------------- Visualization -------------------
# Plot Actual vs Predicted prices for all models
plt.figure(figsize=(15, 6))
plt.plot(y_test.values, label="Actual", linewidth=2)
plt.plot(lr.predict(X_test), label="Linear Regression", linestyle='--')
plt.plot(rf.predict(X_test), label="Random Forest", linestyle='--')
plt.plot(xgb.predict(X_test), label="XGBoost", linestyle='--')

plt.title("Stock Price Prediction (Next-Day Close) â€” TSLA")
plt.xlabel("Time Index")
plt.ylabel("Price (USD)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()


